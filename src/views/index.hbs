<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MeetingAI - {{title}}</title>
    <meta name="description" content="{{description}}">
    <link rel="stylesheet" href="/static/css/output.css">
    <script src="https://unpkg.com/htmx.org@1.9.8"></script>
    <script src="https://unpkg.com/alpinejs@3.13.3/dist/cdn.min.js" defer></script>
</head>
<body class="min-h-screen bg-gradient-to-br from-blue-400 via-blue-500 to-blue-600" x-data="meetingApp()">
    <!-- Top notification bar -->
    <div class="bg-white/10 backdrop-blur-sm border-b border-white/20 text-white text-sm py-2 px-4">
        <div class="container mx-auto flex items-center justify-between">
            <div class="flex items-center gap-2">
                <button class="text-white/80 hover:text-white">Ã—</button>
                <span>
                    You're using our global transcription service. Choose your language preference for better accuracy
                </span>
            </div>
            <div class="flex items-center gap-2">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
                </svg>
                <span>English</span>
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </div>
        </div>
    </div>

    <!-- Header -->
    <header class="relative z-10">
        <div class="container mx-auto px-4 py-6">
            <div class="flex items-center space-x-2">
                <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
                <span class="text-2xl font-bold text-white">MeetingAI</span>
            </div>
        </div>
    </header>

    <main class="relative">
        <!-- Initial Upload Screen -->
        <div x-show="!showResults && !isProcessing" class="container mx-auto px-4 py-16">
            <div class="grid lg:grid-cols-2 gap-12 items-center min-h-[70vh]">
                <div class="text-white">
                    <h1 class="text-5xl md:text-6xl lg:text-7xl font-bold mb-8 leading-tight">
                        CHANGE THE WAY YOU
                        <br />
                        <span class="text-white/90">TRANSCRIBE</span>
                    </h1>

                    <p class="text-xl text-white/80 mb-8 max-w-lg leading-relaxed">
                        Upload your meeting recordings and get instant AI-powered transcriptions, summaries, and insights.
                        Transform conversations into actionable intelligence.
                    </p>

                    <div class="relative inline-block">
                        <input
                            type="file"
                            accept="audio/*,video/*"
                            @change="handleFileUpload"
                            class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                            id="file-upload"
                        />
                        <label for="file-upload" class="cursor-pointer">
                            <div class="bg-black hover:bg-gray-900 text-white px-8 py-4 text-lg rounded-full font-semibold flex items-center gap-2 transition-colors">
                                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                </svg>
                                Upload recording
                            </div>
                        </label>
                    </div>

                    <!-- Error Display -->
                    <div x-show="error" 
                         x-transition 
                         class="mt-4 bg-red-500/20 backdrop-blur-sm border border-red-400/30 text-red-100 px-4 py-3 rounded-lg">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-red-300" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                            <div class="ml-3 flex-1">
                                <p class="text-sm font-medium" x-text="error"></p>
                            </div>
                            <div class="ml-auto pl-3">
                                <button @click="error = null" class="inline-flex bg-red-500/20 rounded-md p-1.5 text-red-300 hover:bg-red-500/30 transition-colors">
                                    <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="relative">
                    <div class="bg-white/10 backdrop-blur-lg rounded-3xl p-8 border border-white/20 shadow-2xl">
                        <div class="space-y-6">
                            <div class="flex items-center justify-between">
                                <span class="text-white/80 text-lg">Meeting Analysis</span>
                                <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                            </div>

                            <div class="text-4xl font-bold text-white">Ready to process</div>

                            <div class="bg-white/10 rounded-2xl p-4 border border-white/20">
                                <div class="text-white/80 text-sm mb-2">Features</div>
                                <div class="space-y-2">
                                    <div class="flex items-center gap-3">
                                        <div class="w-2 h-2 bg-blue-300 rounded-full"></div>
                                        <span class="text-white text-sm">AI Transcription</span>
                                    </div>
                                    <div class="flex items-center gap-3">
                                        <div class="w-2 h-2 bg-green-300 rounded-full"></div>
                                        <span class="text-white text-sm">Smart Summary</span>
                                    </div>
                                    <div class="flex items-center gap-3">
                                        <div class="w-2 h-2 bg-purple-300 rounded-full"></div>
                                        <span class="text-white text-sm">Key Insights</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Processing Screen -->
        <div x-show="isProcessing" class="container mx-auto px-4 py-16">
            <div class="max-w-2xl mx-auto text-center">
                <div class="bg-white/10 backdrop-blur-lg rounded-3xl p-12 border border-white/20 shadow-2xl">
                    <svg class="h-16 w-16 animate-spin text-white mx-auto mb-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    <h2 class="text-3xl font-bold text-white mb-6">Processing Your Recording</h2>
                    <p class="text-white/80 mb-6 text-lg">
                        Analyzing: <span class="font-semibold text-white" x-text="uploadedFileName"></span>
                    </p>
                    <div class="w-full bg-white/20 rounded-full h-3 mb-6">
                        <div class="bg-white h-3 rounded-full animate-pulse transition-all duration-1000" style="width: 75%"></div>
                    </div>
                    <p class="text-white/60">AI is transcribing and analyzing your meeting content...</p>
                </div>
            </div>
        </div>

        <!-- Results Screen -->
        <div x-show="showResults" class="bg-white min-h-screen">
            <div class="container mx-auto px-4 py-12">
                <div class="flex items-center justify-between mb-8">
                    <div>
                        <h1 class="text-4xl font-bold text-gray-900 mb-2">Meeting Analysis Complete</h1>
                        <p class="text-gray-600 text-lg">File: <span x-text="uploadedFileName"></span></p>
                    </div>
                    <button @click="handleReset()" class="bg-blue-600 hover:bg-blue-700 text-white rounded-full px-6 py-3 font-medium transition-colors">
                        Upload New Recording
                    </button>
                </div>

                <!-- Tabs -->
                <div class="w-full">
                    <div class="flex w-full bg-gray-100 rounded-2xl p-1 mb-8">
                        <button 
                            @click="activeTab = 'transcription'"
                            :class="activeTab === 'transcription' ? 'bg-white shadow-sm' : 'hover:bg-gray-200'"
                            class="flex-1 text-lg py-4 rounded-xl transition-colors"
                        >
                            Complete Transcription
                        </button>
                        <button 
                            @click="activeTab = 'summary'"
                            :class="activeTab === 'summary' ? 'bg-white shadow-sm' : 'hover:bg-gray-200'"
                            class="flex-1 text-lg py-4 rounded-xl transition-colors"
                        >
                            Summary
                        </button>
                        <button 
                            @click="activeTab = 'takeaways'"
                            :class="activeTab === 'takeaways' ? 'bg-white shadow-sm' : 'hover:bg-gray-200'"
                            class="flex-1 text-lg py-4 rounded-xl transition-colors"
                        >
                            Key Takeaways
                        </button>
                    </div>

                    <!-- Transcription Tab -->
                    <div x-show="activeTab === 'transcription'" class="border-0 shadow-lg rounded-2xl bg-white">
                        <div class="p-6 border-b">
                            <h3 class="text-2xl font-semibold">Full Transcription</h3>
                            <p class="text-gray-600 text-lg mt-1">Complete word-for-word transcription of your meeting</p>
                        </div>
                        <div class="p-6">
                            <div class="bg-gray-50 p-8 rounded-2xl font-mono text-sm leading-relaxed whitespace-pre-line border" x-text="transcriptionText">
                            </div>
                        </div>
                    </div>

                    <!-- Summary Tab -->
                    <div x-show="activeTab === 'summary'" class="border-0 shadow-lg rounded-2xl bg-white">
                        <div class="p-6 border-b">
                            <h3 class="text-2xl font-semibold">Meeting Summary</h3>
                            <p class="text-gray-600 text-lg mt-1">AI-generated summary of the main discussion points</p>
                        </div>
                        <div class="p-6">
                            <div class="bg-gradient-to-r from-blue-50 to-indigo-50 p-8 rounded-2xl border border-blue-100">
                                <p class="text-gray-800 leading-relaxed text-lg" x-text="summaryText"></p>
                            </div>
                        </div>
                    </div>

                    <!-- Takeaways Tab -->
                    <div x-show="activeTab === 'takeaways'" class="border-0 shadow-lg rounded-2xl bg-white">
                        <div class="p-6 border-b">
                            <h3 class="text-2xl font-semibold">Key Takeaways</h3>
                            <p class="text-gray-600 text-lg mt-1">Important points and action items from the meeting</p>
                        </div>
                        <div class="p-6">
                            <div class="space-y-6">
                                <template x-for="(takeaway, index) in keyTakeaways" :key="index">
                                    <div class="flex items-start gap-4 p-4 bg-gray-50 rounded-xl border">
                                        <div class="w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-semibold flex-shrink-0" x-text="index + 1">
                                        </div>
                                        <span class="text-gray-800 leading-relaxed text-lg" x-text="takeaway"></span>
                                    </div>
                                </template>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer x-show="!showResults" class="bg-black text-white py-6 mt-auto">
        <div class="container mx-auto px-4 flex items-center justify-between">
            <div class="flex items-center space-x-2">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
                <span class="text-lg font-bold">MeetingAI</span>
            </div>
            <div class="text-sm text-gray-400">
                curated by <span class="text-white font-semibold">AI Labs</span>
            </div>
        </div>
    </footer>

    <script>
        function meetingApp() {
            return {
                uploadedFileName: '',
                isProcessing: false,
                showResults: false,
                activeTab: 'transcription',
                currentMeetingId: null,
                error: null,
                transcriptionText: '',
                summaryText: '',
                keyTakeaways: [],
                
                async handleFileUpload(event) {
                    const file = event.target.files?.[0];
                    if (!file) return;

                    // Validate file type
                    const allowedTypes = ['audio/mpeg', 'audio/wav', 'audio/mp4', 'audio/m4a', 'video/mp4'];
                    if (!allowedTypes.includes(file.type) && !file.name.match(/\.(mp3|wav|m4a|mp4)$/i)) {
                        this.error = 'Please upload a valid audio file (MP3, WAV, M4A, MP4)';
                        return;
                    }

                    // Validate file size (50MB limit)
                    const maxSize = 50 * 1024 * 1024; // 50MB
                    if (file.size > maxSize) {
                        this.error = 'File size must be less than 50MB';
                        return;
                    }

                    this.uploadedFileName = file.name;
                    this.isProcessing = true;
                    this.error = null;

                    try {
                        // Create FormData for file upload
                        const formData = new FormData();
                        formData.append('file', file);

                        // Upload file to backend
                        const response = await fetch('/api/upload', {
                            method: 'POST',
                            body: formData
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || 'Upload failed');
                        }

                        const result = await response.json();
                        this.currentMeetingId = result.meetingId;

                        // Start polling for processing status
                        this.pollForResults();

                    } catch (error) {
                        console.error('Upload error:', error);
                        this.error = error.message || 'Upload failed. Please try again.';
                        this.isProcessing = false;
                    }
                },

                async pollForResults() {
                    if (!this.currentMeetingId) return;

                    try {
                        const response = await fetch(`/api/meetings/${this.currentMeetingId}?format=json`);
                        if (!response.ok) {
                            throw new Error('Failed to check processing status');
                        }

                        const data = await response.json();
                        
                        // Check meeting status
                        if (data.meeting.status === 'completed') {
                            // Processing complete, show results
                            await this.loadMeetingResults();
                        } else if (data.meeting.status === 'failed') {
                            // Processing failed
                            this.error = 'Processing failed. Please try uploading again.';
                            this.isProcessing = false;
                        } else {
                            // Still processing (uploading, transcribing, etc.), poll again
                            setTimeout(() => this.pollForResults(), 3000);
                        }
                    } catch (error) {
                        console.error('Polling error:', error);
                        // Keep polling even if there's an error, might be temporary
                        setTimeout(() => this.pollForResults(), 5000);
                    }
                },

                async loadMeetingResults() {
                    if (!this.currentMeetingId) return;

                    try {
                        // Fetch meeting data as JSON
                        const response = await fetch(`/api/meetings/${this.currentMeetingId}?format=json`);
                        if (!response.ok) {
                            throw new Error('Failed to load results');
                        }

                        const data = await response.json();
                        
                        // Update the UI with real data
                        if (data.transcription) {
                            this.transcriptionText = data.transcription.text;
                        }
                        
                        if (data.aiNotes) {
                            this.summaryText = data.aiNotes.summary;
                            this.keyTakeaways = JSON.parse(data.aiNotes.keyPoints || '[]');
                        }

                        this.isProcessing = false;
                        this.showResults = true;

                    } catch (error) {
                        console.error('Load results error:', error);
                        // Fallback to demo data if real data fails
                        this.loadDemoData();
                        this.isProcessing = false;
                        this.showResults = true;
                    }
                },

                loadDemoData() {
                    // Fallback demo data
                    this.transcriptionText = `Speaker 1: Good morning everyone, thank you for joining today's quarterly review meeting. Let's start by going over our key performance indicators for Q3.

Speaker 2: Thanks for having me. I'd like to begin with our sales figures. We've seen a 15% increase compared to last quarter, which puts us ahead of our projected targets.

Speaker 1: That's excellent news. What about our customer satisfaction scores?

Speaker 3: Our NPS score has improved from 7.2 to 8.1, which is a significant improvement. The main feedback we're getting is that customers appreciate our faster response times.

Speaker 2: Speaking of response times, we've reduced our average ticket resolution time from 24 hours to 16 hours.

Speaker 1: Great progress. Let's discuss our action items for Q4. We need to focus on expanding our market reach and improving our product features based on customer feedback.`;

                    this.summaryText = `This quarterly review meeting covered Q3 performance metrics and Q4 planning. Key highlights include a 15% sales increase exceeding targets, improved customer satisfaction with NPS rising from 7.2 to 8.1, and reduced ticket resolution time from 24 to 16 hours. The team discussed focusing on market expansion and product feature improvements for Q4 based on customer feedback.`;

                    this.keyTakeaways = [
                        "Sales increased by 15% in Q3, exceeding projected targets",
                        "Customer satisfaction improved significantly (NPS: 7.2 â†’ 8.1)",
                        "Average ticket resolution time reduced from 24 to 16 hours",
                        "Customers appreciate faster response times",
                        "Q4 focus areas: market expansion and product feature improvements",
                        "Action items based on customer feedback to be prioritized"
                    ];
                },
                
                handleReset() {
                    this.uploadedFileName = '';
                    this.showResults = false;
                    this.isProcessing = false;
                    this.activeTab = 'transcription';
                    this.currentMeetingId = null;
                    this.error = null;
                    this.transcriptionText = '';
                    this.summaryText = '';
                    this.keyTakeaways = [];
                    
                    // Reset file input
                    const fileInput = document.getElementById('file-upload');
                    if (fileInput) fileInput.value = '';
                }
            }
        }
    </script>
</body>
</html> 