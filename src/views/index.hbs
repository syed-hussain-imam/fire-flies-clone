<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MeetingAI - {{title}}</title>
    <meta name="description" content="{{description}}">
    <link rel="stylesheet" href="/static/css/output.css">
    <script src="https://unpkg.com/htmx.org@1.9.8"></script>
    <script src="https://unpkg.com/alpinejs@3.13.3/dist/cdn.min.js" defer></script>
</head>
<body class="min-h-screen bg-gradient-to-br from-blue-400 via-blue-500 to-blue-600" x-data="meetingApp()">
    <!-- Top notification bar -->
    <div class="bg-white/10 backdrop-blur-sm border-b border-white/20 text-white text-sm py-2 px-4">
        <div class="container mx-auto flex items-center justify-between">
            <div class="flex items-center gap-2">
                <button class="text-white/80 hover:text-white">Ã—</button>
                <span>
                    You're using our global transcription service. Choose your language preference for better accuracy
                </span>
            </div>
            <div class="flex items-center gap-2">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
                </svg>
                <span>English</span>
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </div>
        </div>
    </div>

    <!-- Header -->
    <header class="relative z-10">
        <div class="container mx-auto px-4 py-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-2">
                    <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                    </svg>
                    <span class="text-2xl font-bold text-white">MeetingAI</span>
                </div>
                <nav class="hidden md:flex items-center space-x-8 text-white">
                    <a href="#" class="hover:text-white/80 font-medium">Personal</a>
                    <a href="#" class="hover:text-white/80 font-medium">Business</a>
                    <a href="#" class="hover:text-white/80 font-medium">Enterprise</a>
                    <a href="#" class="hover:text-white/80 font-medium">Pricing</a>
                    <div class="flex items-center gap-2 bg-white/10 backdrop-blur-sm rounded-full px-4 py-2 border border-white/20">
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
                        </svg>
                        <span>English</span>
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </div>
                </nav>
            </div>
        </div>
    </header>

    <main class="relative">
        <!-- Hero Section - Always Visible -->
        <div class="container mx-auto px-4 py-16">
            <div class="grid lg:grid-cols-2 gap-12 items-center">
                <div class="text-white">
                    <h1 class="text-5xl md:text-6xl lg:text-7xl font-bold mb-8 leading-tight">
                        CHANGE THE WAY YOU
                        <br />
                        <span class="text-white/90">TRANSCRIBE</span>
                    </h1>

                    <p class="text-xl text-white/80 mb-8 max-w-lg leading-relaxed">
                        Upload your meeting recordings and get instant AI-powered transcriptions, summaries, and insights.
                        Transform conversations into actionable intelligence.
                    </p>

                    <!-- Recording Controls -->
                    <div x-show="!isProcessing" class="max-w-2xl mx-auto space-y-8">
                        <!-- Live Recording Section -->
                        <div class="bg-white/10 backdrop-blur-lg rounded-3xl p-8 border border-white/20">
                            <div class="text-center">
                                <!-- Live Recording Indicator -->
                                <div x-show="recordingState === 'recording'" class="flex items-center justify-center gap-3 mb-6">
                                    <div class="w-4 h-4 bg-red-500 rounded-full animate-pulse"></div>
                                    <span class="text-white text-lg font-medium">LIVE RECORDING</span>
                                </div>

                                <!-- Timer Display -->
                                <div class="mb-8">
                                    <div class="text-6xl font-mono font-bold text-white mb-4" x-text="formatTime(recordingTime)"></div>
                                    <div class="text-white/60 text-lg">
                                        <span x-show="recordingState === 'idle'">Ready to record</span>
                                        <span x-show="recordingState === 'recording'">Live transcribing...</span>
                                        <span x-show="recordingState === 'paused'">Recording paused</span>
                                        <span x-show="recordingState === 'stopped'">Recording complete</span>
                                    </div>
                                </div>

                                <!-- Recording Controls -->
                                <div class="flex items-center justify-center gap-6">
                                    <!-- Idle State - Start Recording -->
                                    <div x-show="recordingState === 'idle'" class="flex items-center justify-center">
                                        <button
                                            @click="handleStartRecording"
                                            class="bg-red-600 hover:bg-red-700 text-white rounded-full w-20 h-20 p-0 shadow-2xl transition-colors flex items-center justify-center"
                                        >
                                            <svg class="h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
                                            </svg>
                                        </button>
                                    </div>

                                    <!-- Recording State - Pause, Stop, Restart -->
                                    <div x-show="recordingState === 'recording'" class="flex items-center justify-center gap-4">
                                        <button
                                            @click="pauseRecording"
                                            class="bg-yellow-600 hover:bg-yellow-700 text-white rounded-full w-16 h-16 p-0 transition-colors flex items-center justify-center"
                                        >
                                            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6"></path>
                                            </svg>
                                        </button>
                                        <button
                                            @click="stopRecording"
                                            class="bg-red-600 hover:bg-red-700 text-white rounded-full w-16 h-16 p-0 transition-colors flex items-center justify-center"
                                        >
                                            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 10h6v4H9z"></path>
                                            </svg>
                                        </button>
                                        <button
                                            @click="restartRecording"
                                            class="bg-blue-600 hover:bg-blue-700 text-white rounded-full w-16 h-16 p-0 transition-colors flex items-center justify-center"
                                        >
                                            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                            </svg>
                                        </button>
                                    </div>

                                    <!-- Paused State - Resume, Stop, Restart -->
                                    <div x-show="recordingState === 'paused'" class="flex items-center justify-center gap-4">
                                        <button
                                            @click="resumeRecording"
                                            class="bg-green-600 hover:bg-green-700 text-white rounded-full w-16 h-16 p-0 transition-colors flex items-center justify-center"
                                        >
                                            <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                                                <path d="M8 5v14l11-7z"></path>
                                            </svg>
                                        </button>
                                        <button
                                            @click="stopRecording"
                                            class="bg-red-600 hover:bg-red-700 text-white rounded-full w-16 h-16 p-0 transition-colors flex items-center justify-center"
                                        >
                                            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 10h6v4H9z"></path>
                                            </svg>
                                        </button>
                                        <button
                                            @click="restartRecording"
                                            class="bg-blue-600 hover:bg-blue-700 text-white rounded-full w-16 h-16 p-0 transition-colors flex items-center justify-center"
                                        >
                                            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                            </svg>
                                        </button>
                                    </div>

                                    <!-- Stopped State - Restart -->
                                    <div x-show="recordingState === 'stopped'" class="flex items-center justify-center">
                                        <button
                                            @click="restartRecording"
                                            class="bg-blue-600 hover:bg-blue-700 text-white rounded-full w-16 h-16 p-0 transition-colors flex items-center justify-center"
                                        >
                                            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Upload Section -->
                        <div x-show="recordingState === 'idle' && !uploadedFileName" class="text-center">
                            <div class="text-white/60 mb-6 text-xl">or</div>
                            <div class="relative inline-block">
                                <input
                                    type="file"
                                    accept="audio/*,video/*"
                                    @change="handleFileUpload"
                                    class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                                    id="file-upload"
                                />
                                <label for="file-upload" class="cursor-pointer">
                                    <div class="bg-black hover:bg-gray-900 text-white px-8 py-4 text-lg rounded-full font-semibold flex items-center gap-3 transition-colors shadow-lg min-w-[280px] justify-center">
                                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                        </svg>
                                        Upload recording
                                    </div>
                                </label>
                            </div>
                        </div>

                        <!-- Start New Session Button (only for uploaded files) -->
                        <div x-show="showResults && uploadedFileName && recordingState === 'idle'" class="text-center">
                            <div class="text-white/60 mb-6 text-xl">or</div>
                            <button
                                @click="handleReset"
                                class="bg-white/10 hover:bg-white/20 text-white border border-white/20 backdrop-blur-sm px-8 py-4 text-lg rounded-full font-medium transition-colors min-w-[280px]"
                            >
                                Start New Session
                            </button>
                        </div>
                    </div>

                    <!-- Processing Button -->
                    <div x-show="isProcessing" class="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                        <div class="flex items-center gap-4">
                            <svg class="h-8 w-8 animate-spin text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            <div>
                                <div class="text-white font-semibold">Processing...</div>
                                <div class="text-white/80 text-sm" x-text="uploadedFileName"></div>
                            </div>
                        </div>
                        <div class="w-full bg-white/20 rounded-full h-2 mt-4">
                            <div class="bg-white h-2 rounded-full animate-pulse transition-all duration-1000" style="width: 75%"></div>
                        </div>
                    </div>



                    <!-- Error Display -->
                    <div x-show="error" 
                         x-transition 
                         class="mt-4 bg-red-500/20 backdrop-blur-sm border border-red-400/30 text-red-100 px-4 py-3 rounded-lg">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-red-300" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                            <div class="ml-3 flex-1">
                                <p class="text-sm font-medium" x-text="error"></p>
                            </div>
                            <div class="ml-auto pl-3">
                                <button @click="error = null" class="inline-flex bg-red-500/20 rounded-md p-1.5 text-red-300 hover:bg-red-500/30 transition-colors">
                                    <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- File size info -->
                    <p class="text-white/60 text-sm mt-4">
                        Supports MP3, WAV, M4A, MP4 formats â€¢ Maximum 25MB file size
                    </p>
                </div>

                <div class="relative">
                    <div class="bg-white/10 backdrop-blur-lg rounded-3xl p-8 border border-white/20 shadow-2xl">
                        <div class="space-y-6">
                            <div class="flex items-center justify-between">
                                <span class="text-white/80 text-lg">Meeting Analysis</span>
                                <div :class="showResults ? 'bg-green-400' : 'bg-blue-400 animate-pulse'" class="w-3 h-3 rounded-full"></div>
                            </div>

                            <div class="text-4xl font-bold text-white" x-text="showResults ? 'Analysis Complete' : 'Ready to process'"></div>

                            <div class="bg-white/10 rounded-2xl p-4 border border-white/20">
                                <div class="text-white/80 text-sm mb-2">Features</div>
                                <div class="space-y-2">
                                    <div class="flex items-center gap-3">
                                        <div class="w-2 h-2 bg-blue-300 rounded-full"></div>
                                        <span class="text-white text-sm">AI Transcription</span>
                                    </div>
                                    <div class="flex items-center gap-3">
                                        <div class="w-2 h-2 bg-green-300 rounded-full"></div>
                                        <span class="text-white text-sm">Smart Summary</span>
                                    </div>
                                    <div class="flex items-center gap-3">
                                        <div class="w-2 h-2 bg-purple-300 rounded-full"></div>
                                        <span class="text-white text-sm">Key Insights</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

                <!-- Results Section - Integrated into homepage -->
        <div x-show="showResults" x-transition class="container mx-auto px-4 pb-16" id="results-section">
            <div class="mb-16">
                <h2 class="text-4xl font-bold text-white mb-4 text-center" x-text="isLiveTranscribing ? 'Live Meeting Analysis' : 'Your Meeting Analysis'"></h2>
                <p class="text-white/80 text-xl text-center mb-8" x-text="isLiveTranscribing ? 'Real-time AI transcription in progress' : 'AI-powered insights from your recording'"></p>
            </div>

            <!-- Tabs -->
                <div class="w-full">
                    <div class="flex w-full mb-8 bg-white/10 backdrop-blur-lg p-2 rounded-2xl border border-white/20 gap-2">
                        <button
                            @click="transcriptionReady && (activeTab = 'transcription')"
                            :disabled="!transcriptionReady"
                            :class="[
                                activeTab === 'transcription' ? 'bg-white text-gray-900 shadow-sm' : 'text-white hover:bg-white/20',
                                !transcriptionReady ? 'opacity-50 cursor-not-allowed' : ''
                            ]"
                            class="flex-1 text-lg py-4 rounded-xl transition-all font-medium"
                        >
                            <span class="flex items-center justify-center gap-2">
                                <span x-show="transcriptionReady && !isLiveTranscribing" class="w-2 h-2 bg-green-500 rounded-full"></span>
                                <span x-show="isLiveTranscribing" class="w-2 h-2 bg-red-500 rounded-full animate-pulse"></span>
                                <span x-show="!transcriptionReady && !isLiveTranscribing" class="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></span>
                                <span x-text="isLiveTranscribing ? 'Live Transcription' : 'Complete Transcription'"></span>
                            </span>
                        </button>
                        <button
                            @click="(aiAnalysisReady || isLiveTranscribing) && (activeTab = 'summary')"
                            :disabled="!aiAnalysisReady && !isLiveTranscribing"
                            :class="[
                                activeTab === 'summary' ? 'bg-white text-gray-900 shadow-sm' : 'text-white hover:bg-white/20',
                                !aiAnalysisReady && !isLiveTranscribing ? 'opacity-50 cursor-not-allowed' : ''
                            ]"
                            class="flex-1 text-lg py-4 rounded-xl transition-all font-medium"
                        >
                            <span class="flex items-center justify-center gap-2">
                                <span x-show="aiAnalysisReady && !isLiveTranscribing" class="w-2 h-2 bg-green-500 rounded-full"></span>
                                <span x-show="isLiveTranscribing" class="w-2 h-2 bg-red-500 rounded-full animate-pulse"></span>
                                <span x-show="!aiAnalysisReady && transcriptionReady && !isLiveTranscribing" class="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></span>
                                <span x-show="!aiAnalysisReady && !transcriptionReady && !isLiveTranscribing" class="w-2 h-2 bg-gray-400 rounded-full"></span>
                                <span x-text="isLiveTranscribing ? 'Live Summary' : 'Summary'"></span>
                            </span>
                        </button>
                        <button
                            @click="(aiAnalysisReady || isLiveTranscribing) && (activeTab = 'takeaways')"
                            :disabled="!aiAnalysisReady && !isLiveTranscribing"
                            :class="[
                                activeTab === 'takeaways' ? 'bg-white text-gray-900 shadow-sm' : 'text-white hover:bg-white/20',
                                !aiAnalysisReady && !isLiveTranscribing ? 'opacity-50 cursor-not-allowed' : ''
                            ]"
                            class="flex-1 text-lg py-4 rounded-xl transition-all font-medium"
                        >
                            <span class="flex items-center justify-center gap-2">
                                <span x-show="aiAnalysisReady && !isLiveTranscribing" class="w-2 h-2 bg-green-500 rounded-full"></span>
                                <span x-show="isLiveTranscribing" class="w-2 h-2 bg-red-500 rounded-full animate-pulse"></span>
                                <span x-show="!aiAnalysisReady && transcriptionReady && !isLiveTranscribing" class="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></span>
                                <span x-show="!aiAnalysisReady && !transcriptionReady && !isLiveTranscribing" class="w-2 h-2 bg-gray-400 rounded-full"></span>
                                <span x-text="isLiveTranscribing ? 'Live Takeaways' : 'Key Takeaways'"></span>
                            </span>
                        </button>
                    </div>

                <!-- Transcription Tab -->
                <div x-show="activeTab === 'transcription'" class="bg-white/10 backdrop-blur-lg rounded-3xl p-8 border border-white/20 shadow-2xl">
                    <div class="mb-6">
                        <h3 class="text-2xl font-bold text-white mb-2" x-text="isLiveTranscribing ? 'Live Transcription' : 'Full Transcription'"></h3>
                        <p class="text-white/80 text-lg" x-text="isLiveTranscribing ? 'Real-time transcription of your meeting' : 'Complete word-for-word transcription of your meeting'"></p>
                    </div>
                    <div class="bg-white/10 backdrop-blur-sm p-6 rounded-2xl border border-white/20 font-mono text-sm leading-relaxed text-white/90 whitespace-pre-line max-h-96 overflow-y-auto">
                        <span x-text="transcriptionText || (isLiveTranscribing ? '' : 'Transcription will appear here...')"></span>
                        <span x-show="isLiveTranscribing" class="animate-pulse">|</span>
                    </div>
                </div>

                <!-- Summary Tab -->
                <div x-show="activeTab === 'summary'" class="bg-white/10 backdrop-blur-lg rounded-3xl p-8 border border-white/20 shadow-2xl">
                    <div class="mb-6">
                        <h3 class="text-2xl font-bold text-white mb-2" x-text="isLiveTranscribing ? 'Live Summary' : 'Meeting Summary'"></h3>
                        <p class="text-white/80 text-lg" x-text="isLiveTranscribing ? 'AI-generated summary updating in real-time' : 'AI-generated summary of the main discussion points'"></p>
                    </div>
                    <div class="bg-gradient-to-r from-white/10 to-white/5 backdrop-blur-sm p-8 rounded-2xl border border-white/20">
                        <p class="text-white leading-relaxed text-lg text-center">
                            <span x-text="summaryText || (isLiveTranscribing ? 'Summary will be generated as the meeting progresses...' : 'Summary will appear here...')"></span>
                            <span x-show="isLiveTranscribing" class="animate-pulse">|</span>
                        </p>
                    </div>
                </div>

                <!-- Takeaways Tab -->
                <div x-show="activeTab === 'takeaways'" class="bg-white/10 backdrop-blur-lg rounded-3xl p-8 border border-white/20 shadow-2xl">
                    <div class="mb-6">
                        <h3 class="text-2xl font-bold text-white mb-2" x-text="isLiveTranscribing ? 'Live Key Takeaways' : 'Key Takeaways'"></h3>
                        <p class="text-white/80 text-lg" x-text="isLiveTranscribing ? 'Important points identified in real-time' : 'Important points and action items from the meeting'"></p>
                    </div>
                    <div class="space-y-6 max-w-3xl mx-auto">
                        <template x-for="(takeaway, index) in keyTakeaways" :key="index">
                            <div class="flex items-start gap-6 p-8 bg-white/10 backdrop-blur-sm rounded-2xl border border-white/20">
                                <div class="w-10 h-10 bg-white text-blue-600 rounded-full flex items-center justify-center text-lg font-bold flex-shrink-0" x-text="index + 1"></div>
                                <span class="text-white leading-relaxed text-xl" x-text="takeaway"></span>
                            </div>
                        </template>
                        
                        <!-- Empty state for takeaways -->
                        <div x-show="keyTakeaways.length === 0" class="text-center p-8 bg-white/10 backdrop-blur-sm rounded-2xl border border-white/20">
                            <div class="text-white/60 leading-relaxed text-xl">
                                <span x-text="isLiveTranscribing ? 'Key takeaways will appear here as important points are identified...' : 'Key takeaways will appear here...'"></span>
                                <span x-show="isLiveTranscribing" class="animate-pulse">|</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-black text-white py-6 mt-auto">
        <div class="container mx-auto px-4 flex items-center justify-between">
            <div class="flex items-center space-x-2">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
                <span class="text-lg font-bold">MeetingAI</span>
            </div>
            <div class="text-sm text-gray-400">
                curated by <span class="text-white font-semibold">AI Labs</span>
            </div>
        </div>
    </footer>

    <script>
        function meetingApp() {
            return {
                uploadedFileName: '',
                isProcessing: false,
                showResults: false,
                activeTab: 'transcription',
                currentMeetingId: null,
                error: null,
                transcriptionText: '',
                summaryText: '',
                keyTakeaways: [],
                transcriptionReady: false,
                aiAnalysisReady: false,
                
                // Recording states
                recordingState: 'idle', // 'idle' | 'recording' | 'paused' | 'stopped'
                recordingTime: 0,
                mediaRecorder: null,
                recordedBlob: null,
                recordingInterval: null,
                transcriptionInterval: null,
                recordingChunks: [],
                
                // Live transcription states
                liveTranscription: '',
                liveSummary: '',
                liveKeyTakeaways: [],
                isLiveTranscribing: false,
                
                // WebSocket connection for real-time transcription
                websocket: null,
                sessionId: null,
                audioContext: null,
                processor: null,
                isConnected: false,
                
                async handleFileUpload(event) {
                    const file = event.target.files?.[0];
                    if (!file) return;

                    // Reset previous results if any (but keep file input)
                    this.resetData();

                    // Validate file type
                    const allowedTypes = ['audio/mpeg', 'audio/wav', 'audio/mp4', 'audio/m4a', 'video/mp4'];
                    if (!allowedTypes.includes(file.type) && !file.name.match(/\.(mp3|wav|m4a|mp4)$/i)) {
                        this.error = 'Please upload a valid audio file (MP3, WAV, M4A, MP4)';
                        return;
                    }

                    // Validate file size (25MB limit - OpenAI Whisper requirement)
                    const maxSize = 25 * 1024 * 1024; // 25MB
                    if (file.size > maxSize) {
                        this.error = 'File size must be less than 25MB (OpenAI Whisper limit)';
                        return;
                    }

                    this.uploadedFileName = file.name;
                    this.isProcessing = true;
                    this.error = null;

                    try {
                        // Create FormData for file upload
                        const formData = new FormData();
                        formData.append('file', file);

                        // Upload file to backend
                        const response = await fetch('/api/upload', {
                            method: 'POST',
                            body: formData
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || 'Upload failed');
                        }

                        const result = await response.json();
                        this.currentMeetingId = result.meetingId;

                        // Start polling for processing status
                        this.pollForResults();

                    } catch (error) {
                        console.error('Upload error:', error);
                        this.error = error.message || 'Upload failed. Please try again.';
                        this.isProcessing = false;
                    }
                },

                async pollForResults() {
                    if (!this.currentMeetingId) return;

                    try {
                        const response = await fetch(`/api/meetings/${this.currentMeetingId}?format=json`);
                        if (!response.ok) {
                            throw new Error('Failed to check processing status');
                        }

                        const data = await response.json();
                        
                        // Check meeting status for progressive loading
                        if (data.meeting.status === 'completed') {
                            // Everything complete, show full results
                            await this.loadMeetingResults();
                        } else if (data.meeting.status === 'transcription_complete') {
                            // Transcription ready, show partial results and keep polling for AI
                            await this.loadPartialResults(data);
                            setTimeout(() => this.pollForResults(), 2000); // Poll faster for AI completion
                        } else if (data.meeting.status === 'failed') {
                            // Processing failed - show specific error message if available
                            this.error = data.meeting.description || 'Processing failed. Please try uploading again.';
                            this.isProcessing = false;
                        } else {
                            // Still processing (uploading, transcribing), poll again
                            setTimeout(() => this.pollForResults(), 2000); // Faster polling for better UX
                        }
                    } catch (error) {
                        console.error('Polling error:', error);
                        // Keep polling even if there's an error, might be temporary
                        setTimeout(() => this.pollForResults(), 3000);
                    }
                },

                async loadPartialResults(data) {
                    // Show transcription immediately when available
                    if (data.transcription) {
                        this.transcriptionText = data.transcription.text;
                    }
                    
                    // Show processing screen with transcription available
                    this.isProcessing = false;
                    this.showResults = true;
                    this.transcriptionReady = true;
                    this.aiAnalysisReady = false; // Still waiting for AI analysis
                    
                    // Set default tab to transcription since it's ready
                    this.activeTab = 'transcription';
                    
                    // Auto scroll to results section
                    this.scrollToResults();
                },

                async loadMeetingResults() {
                    if (!this.currentMeetingId) return;

                    try {
                        // Fetch meeting data as JSON
                        const response = await fetch(`/api/meetings/${this.currentMeetingId}?format=json`);
                        if (!response.ok) {
                            throw new Error('Failed to load results');
                        }

                        const data = await response.json();
                        
                        // Update the UI with real data
                        if (data.transcription) {
                            this.transcriptionText = data.transcription.text;
                        }
                        
                        if (data.aiNotes) {
                            this.summaryText = data.aiNotes.summary;
                            this.keyTakeaways = JSON.parse(data.aiNotes.keyPoints || '[]');
                        }

                        this.isProcessing = false;
                        this.showResults = true;
                        this.transcriptionReady = true;
                        this.aiAnalysisReady = true; // Everything is ready now

                        // Auto scroll to results section
                        this.scrollToResults();

                    } catch (error) {
                        console.error('Load results error:', error);
                        // Fallback to demo data if real data fails
                        this.loadDemoData();
                        this.isProcessing = false;
                        this.showResults = true;
                        this.transcriptionReady = true;
                        this.aiAnalysisReady = true;
                        
                        // Auto scroll to results section
                        this.scrollToResults();
                    }
                },

                loadDemoData() {
                    // Fallback demo data
                    this.transcriptionText = `Speaker 1: Good morning everyone, thank you for joining today's quarterly review meeting. Let's start by going over our key performance indicators for Q3.

Speaker 2: Thanks for having me. I'd like to begin with our sales figures. We've seen a 15% increase compared to last quarter, which puts us ahead of our projected targets.

Speaker 1: That's excellent news. What about our customer satisfaction scores?

Speaker 3: Our NPS score has improved from 7.2 to 8.1, which is a significant improvement. The main feedback we're getting is that customers appreciate our faster response times.

Speaker 2: Speaking of response times, we've reduced our average ticket resolution time from 24 hours to 16 hours.

Speaker 1: Great progress. Let's discuss our action items for Q4. We need to focus on expanding our market reach and improving our product features based on customer feedback.`;

                    this.summaryText = `This quarterly review meeting covered Q3 performance metrics and Q4 planning. Key highlights include a 15% sales increase exceeding targets, improved customer satisfaction with NPS rising from 7.2 to 8.1, and reduced ticket resolution time from 24 to 16 hours. The team discussed focusing on market expansion and product feature improvements for Q4 based on customer feedback.`;

                    this.keyTakeaways = [
                        "Sales increased by 15% in Q3, exceeding projected targets",
                        "Customer satisfaction improved significantly (NPS: 7.2 â†’ 8.1)",
                        "Average ticket resolution time reduced from 24 to 16 hours",
                        "Customers appreciate faster response times",
                        "Q4 focus areas: market expansion and product feature improvements",
                        "Action items based on customer feedback to be prioritized"
                    ];
                },
                
                scrollToResults() {
                    // Small delay to ensure DOM is updated and element is visible
                    setTimeout(() => {
                        const resultsSection = document.getElementById('results-section');
                        if (resultsSection) {
                            resultsSection.scrollIntoView({ 
                                behavior: 'smooth', 
                                block: 'start' 
                            });
                        }
                    }, 100);
                },

                async handleStartRecording() {
                    try {
                        // Reset previous results if any
                        this.resetData();
                        
                        // First, connect to WebSocket
                        await this.connectWebSocket();
                        
                        const stream = await navigator.mediaDevices.getUserMedia({ 
                            audio: {
                                sampleRate: 16000,
                                channelCount: 1,
                                echoCancellation: true,
                                noiseSuppression: true
                            }
                        });
                        
                        // Use WebM format for better compatibility with whisper.cpp
                        const recorder = new MediaRecorder(stream, {
                            mimeType: 'audio/webm'
                        });
                        
                        this.recordingChunks = [];
                        
                        recorder.ondataavailable = (event) => {
                            if (event.data.size > 0) {
                                this.recordingChunks.push(event.data);
                                // Send audio data to WebSocket for real-time transcription
                                this.sendAudioChunk(event.data);
                            }
                        };
                        
                        recorder.onstop = () => {
                            const blob = new Blob(this.recordingChunks, { type: 'audio/webm' });
                            this.recordedBlob = blob;
                            stream.getTracks().forEach(track => track.stop());
                        };
                        
                        this.mediaRecorder = recorder;
                        recorder.start(2000); // Record in 2-second chunks for better transcription quality
                        this.recordingState = 'recording';
                        
                        if (this.recordingTime === 0) {
                            this.recordingTime = 0;
                        }
                        
                        // Start timer
                        this.startTimer();
                        
                        // Start real-time transcription
                        this.startRealTimeTranscription();
                        
                    } catch (error) {
                        console.error('Error accessing microphone:', error);
                        this.error = 'Unable to access microphone. Please check your permissions.';
                    }
                },

                pauseRecording() {
                    if (this.mediaRecorder && this.recordingState === 'recording') {
                        this.mediaRecorder.pause();
                        this.recordingState = 'paused';
                        this.stopTimer();
                        
                        // Send pause message to WebSocket
                        if (this.websocket && this.isConnected) {
                            this.websocket.send(JSON.stringify({
                                type: 'pause_recording'
                            }));
                        }
                    }
                },

                resumeRecording() {
                    if (this.mediaRecorder && this.recordingState === 'paused') {
                        this.mediaRecorder.resume();
                        this.recordingState = 'recording';
                        this.startTimer();
                        
                        // Send resume message to WebSocket
                        if (this.websocket && this.isConnected) {
                            this.websocket.send(JSON.stringify({
                                type: 'resume_recording'
                            }));
                        }
                    }
                },

                stopRecording() {
                    if (this.mediaRecorder) {
                        this.mediaRecorder.stop();
                        this.recordingState = 'stopped';
                        this.stopTimer();
                        this.stopRealTimeTranscription();
                    }
                },

                restartRecording() {
                    if (this.mediaRecorder) {
                        this.mediaRecorder.stop();
                    }
                    this.recordingTime = 0;
                    this.recordedBlob = null;
                    this.recordingState = 'idle';
                    this.showResults = false;
                    this.liveTranscription = '';
                    this.liveSummary = '';
                    this.liveKeyTakeaways = [];
                    this.isLiveTranscribing = false;
                    this.stopTimer();
                    
                    // Clean up WebSocket connection
                    if (this.websocket) {
                        this.websocket.close();
                        this.websocket = null;
                    }
                    this.isConnected = false;
                    this.sessionId = null;
                },

                startTimer() {
                    if (this.recordingInterval) {
                        clearInterval(this.recordingInterval);
                    }
                    this.recordingInterval = setInterval(() => {
                        this.recordingTime++;
                    }, 1000);
                },

                stopTimer() {
                    if (this.recordingInterval) {
                        clearInterval(this.recordingInterval);
                        this.recordingInterval = null;
                    }
                },



                formatTime(seconds) {
                    const mins = Math.floor(seconds / 60);
                    const secs = seconds % 60;
                    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
                },

                resetData() {
                    this.uploadedFileName = '';
                    this.showResults = false;
                    this.isProcessing = false;
                    this.activeTab = 'transcription';
                    this.currentMeetingId = null;
                    this.error = null;
                    this.transcriptionText = '';
                    this.summaryText = '';
                    this.keyTakeaways = [];
                    this.transcriptionReady = false;
                    this.aiAnalysisReady = false;
                    
                    // Reset recording state
                    this.recordingState = 'idle';
                    this.recordingTime = 0;
                    this.recordedBlob = null;
                    this.liveTranscription = '';
                    this.liveSummary = '';
                    this.liveKeyTakeaways = [];
                    this.isLiveTranscribing = false;
                    this.stopTimer();
                    
                    // Clean up WebSocket connection
                    if (this.websocket) {
                        this.websocket.close();
                        this.websocket = null;
                    }
                    this.isConnected = false;
                    this.sessionId = null;
                },
                
                handleReset() {
                    // Reset all data
                    this.resetData();
                    
                    // Clear file input
                    const fileInput = document.getElementById('file-upload');
                    if (fileInput) {
                        fileInput.value = '';
                    }
                },

                // WebSocket methods for real-time transcription
                async connectWebSocket() {
                    return new Promise((resolve, reject) => {
                        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                        const wsUrl = `${protocol}//${window.location.host}/ws/recording`;
                        
                        this.websocket = new WebSocket(wsUrl);
                        
                        this.websocket.onopen = () => {
                            console.log('WebSocket connected');
                            this.isConnected = true;
                            resolve();
                        };
                        
                        this.websocket.onmessage = (event) => {
                            const data = JSON.parse(event.data);
                            this.handleWebSocketMessage(data);
                        };
                        
                        this.websocket.onerror = (error) => {
                            console.error('WebSocket error:', error);
                            this.error = 'Connection error. Please try again.';
                            reject(error);
                        };
                        
                        this.websocket.onclose = () => {
                            console.log('WebSocket disconnected');
                            this.isConnected = false;
                        };
                    });
                },

                handleWebSocketMessage(data) {
                    console.log('Received WebSocket message:', data);
                    
                    switch (data.type) {
                        case 'ready':
                            this.sessionId = data.sessionId;
                            console.log('Session ready:', this.sessionId);
                            break;
                        
                        case 'transcription':
                            console.log('Received transcription:', data.data);
                            this.updateTranscription(data.data);
                            break;
                        
                        case 'recording_started':
                            console.log('Recording started on server');
                            break;
                        
                        case 'recording_stopped':
                            console.log('Recording stopped on server');
                            break;
                        
                        case 'error':
                            console.error('Server error:', data.message);
                            this.error = data.message;
                            break;
                        
                        default:
                            console.warn('Unknown message type:', data.type);
                    }
                },

                updateTranscription(data) {
                    // Use the complete transcript text (backend now sends complete text)
                    const completeText = data.text || data.fullTranscript || '';
                    
                    // Replace the entire transcription content
                    this.liveTranscription = completeText;
                    this.transcriptionText = completeText;
                    
                    // Generate summaries based on complete transcript
                    this.liveSummary = this.generateSimpleSummary(completeText);
                    this.summaryText = this.liveSummary;
                    
                    // Generate key takeaways
                    this.liveKeyTakeaways = this.generateSimpleKeyTakeaways(completeText);
                    this.keyTakeaways = this.liveKeyTakeaways;
                },

                generateSimpleSummary(text) {
                    if (!text || text.trim().length < 50) {
                        return "Recording in progress...";
                    }
                    
                    const words = text.split(' ');
                    if (words.length < 20) {
                        return "Building summary from transcription...";
                    }
                    
                    return `Live meeting in progress. Discussion covers ${words.length} words so far. Key topics being discussed based on the real-time transcription.`;
                },

                generateSimpleKeyTakeaways(text) {
                    if (!text || text.trim().length < 50) {
                        return ["Recording in progress..."];
                    }
                    
                    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);
                    return sentences.slice(0, 3).map(s => s.trim()).filter(s => s.length > 0);
                },

                sendAudioChunk(audioBlob) {
                    if (!this.websocket || !this.isConnected) {
                        console.warn('WebSocket not connected, cannot send audio chunk');
                        return;
                    }
                    
                    console.log('Sending audio chunk:', audioBlob.size, 'bytes');
                    
                    const reader = new FileReader();
                    reader.onload = () => {
                        const base64Data = reader.result.split(',')[1];
                        console.log('Sending base64 audio data:', base64Data.length, 'characters');
                        
                        this.websocket.send(JSON.stringify({
                            type: 'audio_chunk',
                            data: base64Data
                        }));
                    };
                    reader.readAsDataURL(audioBlob);
                },

                startRealTimeTranscription() {
                    if (!this.websocket || !this.isConnected) return;
                    
                    this.isLiveTranscribing = true;
                    this.showResults = true;
                    this.transcriptionReady = true;
                    this.aiAnalysisReady = false;
                    
                    // Auto scroll to results
                    this.scrollToResults();
                    
                    // Send start recording message to server
                    this.websocket.send(JSON.stringify({
                        type: 'start_recording'
                    }));
                },

                stopRealTimeTranscription() {
                    if (this.websocket && this.isConnected) {
                        this.websocket.send(JSON.stringify({
                            type: 'stop_recording'
                        }));
                    }
                    
                    this.isLiveTranscribing = false;
                    this.aiAnalysisReady = true; // Mark analysis as ready when recording stops
                    
                    // Close WebSocket connection
                    if (this.websocket) {
                        this.websocket.close();
                        this.websocket = null;
                    }
                }
            }
        }
    </script>
</body>
</html> 